{"version":3,"sources":["logo.svg","store/actions/list.js","components/UI/Button/Button.js","components/Lists/List.js","store/actions/actionTypes.js","components/Lists/Listform.js","App.js","serviceWorker.js","store/reducers/listReducer.js","index.js"],"names":["module","exports","__webpack_require__","p","list","id","title","body","filteredItems","button","props","react_default","a","createElement","disabled","className","btnType","join","onClick","clicked","children","List","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onDelete","state","counter","deleteItem","setState","onEdit","itemToEdit","editing","onChange","bind","assertThisInitialized","onSubmit","fetchList","nextProps","newItem","unshift","e","defineProperty","target","name","value","preventDefault","itemGettingEdit","editItem","_this2","listItems","map","itemInList","key","Button_Button","type","placeholder","rows","Component","connect","items","item","dispatch","payload","prevFiltered","filter","actions","data","Listform","listItem","createItem","itemData","randomId","Math","floor","random","App","src","logo","alt","Lists_Listform","components_Lists_List","Boolean","window","location","hostname","match","initialState","reducer","arguments","length","undefined","action","objectSpread","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","app","es","src_App_0","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3d7770b5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import * as actionTypes from './actionTypes';\n\nlet list = [\n    {\n        \"id\": 1,\n        \"title\": \"Monday\",\n        \"body\": \"Pick up mail, check dog has food\"\n    },\n    {\n        \"id\": 2,\n        \"title\": \"Tuesday\",\n        \"body\": \"Take out bins\"\n    },\n    {\n        \"id\": 3,\n        \"title\": \"Wednesday\",\n        \"body\": \"Make sure to take the car to do its service\"\n    },\n    {\n        \"id\": 4,\n        \"title\": \"Thursday\",\n        \"body\": \"Finish the exam for the Sainsbury's job\"\n    },\n    {\n        \"id\": 5,\n        \"title\": \"Friday\",\n        \"body\": \"Go to hairdressers, its my monthly trim\"\n    },\n    {\n        \"id\": 6,\n        \"title\": \"Weekend\",\n        \"body\": \"Visit family and redo TODO list!!\"\n    }\n] \nlet filteredItems = null;\n\nexport const fetchList = () => dispatch => {\n    dispatch({\n        type: actionTypes.FETCH_LIST,\n        payload: list\n    })\n};\n\nexport const createItem = (itemData) => dispatch => {\n    const randomId = Math.floor(Math.random() * 1000);\n    itemData.id = randomId;\n    dispatch({\n        type: actionTypes.NEW_ITEM,\n        payload: itemData\n    })\n};\n\nexport const deleteItem = (id, prevFiltered) => dispatch => {\n    if (prevFiltered) {\n        filteredItems = filteredItems.filter(item => item.id !== id);\n        dispatch({\n            type: actionTypes.DELETE_ITEM,\n            payload: filteredItems\n        })\n    } else {\n        filteredItems = list.filter(item => item.id !== id);\n        dispatch({\n            type: actionTypes.DELETE_ITEM,\n            payload: filteredItems\n        })\n    }\n};\n\nexport const editItem = (data, prevFiltered) => dispatch => {\n    if (prevFiltered) {\n        filteredItems = filteredItems.map( (item) => {\n            if (item.id === data.id) {\n                item.body = data.body\n            }\n            return item;\n        });\n        dispatch({\n            type: actionTypes.EDIT_ITEM,\n            payload: filteredItems\n        });\n    } else {\n        filteredItems = list.map( (item) => {\n            if (item.id === data.id) {\n                item.body = data.body\n            }\n            return item;\n        });\n        dispatch({\n            type: actionTypes.EDIT_ITEM,\n            payload: filteredItems\n        });\n    }\n};","import React from 'react';\n\nimport './Button.css';\n\nconst button = (props) => (\n    <button\n      disabled={props.disabled} \n      className={[\"Button\", [props.btnType]].join(' ')}\n      onClick={props.clicked}>{props.children}\n    </button>\n);\n\nexport default button;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport * as actions from '../../store/actions/index';\nimport Button from '../UI/Button/Button';\nimport './List.css';\n\nclass List extends Component {\n    constructor(props) {\n        super(props)\n        \n        this.state = {\n            counter: 0,\n            itemToEdit: '',\n            body: '',\n            editing: false\n        }\n\n        this.onChange = this.onChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n    componentWillMount() {\n        this.props.fetchList();\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.newItem) {\n            this.props.list.unshift(nextProps.newItem);\n        }\n    }\n\n    onChange(e) {\n        this.setState({[ e.target.name]: e.target.value });\n    }\n\n    onSubmit(e) {\n        e.preventDefault();\n        const itemGettingEdit = {\n            id: this.state.itemToEdit,\n            body: this.state.body\n        }\n \n        if (this.state.counter === 1) {\n            this.setState({itemToEdit: '', editing: false});\n            this.props.editItem(itemGettingEdit, true);\n            return;\n        }\n\n        this.setState({itemToEdit: '', editing: false, counter: 1});\n        this.props.editItem(itemGettingEdit, false);\n    }\n\n    // onDelete = (e) => { this.props.deleteItem(e.target.dataset.id); }\n\n    // onDelete = (e) => {\n        // this.props.deleteItem(e.target.dataset.id);\n    // }\n\n    onDelete = (id) => {\n        if (this.state.counter === 1){\n            this.props.deleteItem(id, true);\n            return;\n        }\n        this.props.deleteItem(id, false);\n        this.setState({ counter: 1 });\n    }\n\n    onEdit = (id, body) => {\n       this.setState({ itemToEdit: id, editing: true, body: body });\n    }\n\n    // onDelete = (id) => () => this.props.deleteItem(id);\n\n    render() {\n        const listItems = this.props.list.map(itemInList => (\n            <div key={itemInList.id}> \n                <h3 className=\"title__font--list smaller\"> <span>{itemInList.title} </span>\n                    <Button  \n                        btnType=\"Delete\" \n                        clicked={() => this.onDelete(itemInList.id)}>\n                        {/*  data-id={itemInList.id} */}\n                       <i className=\"fas fa-trash-alt\"></i> \n                    </Button>\n                    <Button  \n                        btnType=\"Edit\" \n                        clicked={() => this.onEdit(itemInList.id, itemInList.body)}>\n                        <i className=\"fas fa-edit\"></i>\n                    </Button>\n                </h3>\n                { \n                    this.state.itemToEdit === itemInList.id && this.state.editing ?\n                    <form onSubmit={this.onSubmit}>\n                        <textarea type=\"text\" name=\"body\" placeholder={itemInList.body} value={this.state.body} rows=\"3\" onChange={this.onChange} /> \n                        <Button btnType=\"Submit\" type=\"submit\">Submit</Button>\n                    </form>\n                    : \n                    <p className=\"body__font\">{itemInList.body}</p> \n                }\n            </div>\n        ));\n        return (\n        <div className=\"max__size\">\n            <h1 className=\"title__font\">List</h1>\n            { listItems }\n            <br/>\n        </div>\n        );\n    };\n};\n\nList.propTypes = {\n    fetchList: PropTypes.func.isRequired,\n    list: PropTypes.array.isRequired,\n    newItem: PropTypes.object\n};\n\nconst mapStateToProps = state => ({\n    list: state.list.items,\n    newItem: state.list.item\n});\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchList: () => dispatch( actions.fetchList() ),\n        deleteItem: (id, prevFiltered) => dispatch( actions.deleteItem(id, prevFiltered) ),\n        editItem: (itemGettingEdit, prevFiltered) => dispatch( actions.editItem(itemGettingEdit, prevFiltered) )\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(List);","export const FETCH_LIST = 'FETCH_LIST';\nexport const NEW_ITEM = 'NEW_ITEM';\nexport const EDIT_ITEM = 'EDIT_ITEM';\nexport const DELETE_ITEM = 'DELETE_ITEM';","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { createItem } from '../../store/actions/list';\nimport Button from '../UI/Button/Button';\nimport './List.css';\n\nclass Listform extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            title: '',\n            body: ''\n        }\n\n        this.onChange = this.onChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n\n    onChange(e) {\n        this.setState({[ e.target.name]: e.target.value });\n    }\n\n    onSubmit(e) {\n        e.preventDefault();\n\n        const listItem = {\n            title: this.state.title,\n            body: this.state.body\n        }\n\n        this.props.createItem(listItem);\n    }\n\n    render() {\n        return (\n        <div>\n            <h1 className=\"title__font\">Add List Item</h1>\n            <form onSubmit={this.onSubmit}>\n                <div>\n                    <input type=\"text\" name=\"title\" placeholder=\"Title...\" onChange={this.onChange} value={this.state.title} />\n                </div>\n                <br />\n                <div>\n                    <textarea type=\"text\" name=\"body\" placeholder=\"Body...\" rows=\"3\" onChange={this.onChange} value={this.state.body} />\n                </div>\n                <Button btnType=\"Submit\" type=\"submit\">Submit</Button>\n            </form>\n        </div>\n        )\n    }\n}\n\nListform.propTypes = {\n    createItem: PropTypes.func.isRequired\n};\n\nexport default connect(null,  { createItem })(Listform);\n","import React, { Component } from 'react';\n\nimport logo from './logo.svg';\nimport './App.css';\nimport List from './components/Lists/List';\nimport ListForm from './components/Lists/Listform';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </header>\n        <ListForm />\n        <hr />\n        <List />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from '../actions/actionTypes';\n\nconst initialState = {\n    items: [],\n    item: {}\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.FETCH_LIST:\n            return {\n                ...state,\n                items: action.payload\n            };\n        case actionTypes.NEW_ITEM:\n            return {\n                ...state,\n                item: action.payload\n            };\n        case actionTypes.DELETE_ITEM:\n            return {\n                ...state,\n                items: action.payload\n            };\n        case actionTypes.EDIT_ITEM:\n            return {\n                ...state,\n                items: action.payload\n            };\n        default: \n            return state;\n    }\n};\n\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport list from './store/reducers/listReducer';\n\n// const composeEnhancers = process.env.NODE_ENV === 'development' ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : null || compose;\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst rootReducer = combineReducers({\n    // posts: post,\n    list: list,\n});\n\nconst store = createStore(rootReducer, composeEnhancers(\n    applyMiddleware(thunk)\n));\n\nconst app = (\n    <Provider store={store}>\n        <App />\n    </Provider>\n);\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}